
CREATE TABLE SortEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    name TEXT NOT NULL UNIQUE
);

INSERT INTO SortEntity VALUES
(1, "title"),
(2, "date"),
(3, "list"),
(4, "priority"),
(5, "label"),
(6, "arbitrary");

CREATE TABLE PriorityEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    name TEXT NOT NULL UNIQUE,
    color INTEGER NOT NULL
);

INSERT INTO PriorityEntity VALUES
(1, "high", -65536),
(2, "medium", -256),
(3, "low", -16776961),
(4, "no", -7829368);

getPriorities:
SELECT * FROM PriorityEntity;

CREATE TABLE InternalListEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    title TEXT NOT NULL,
    position INTEGER NOT NULL,
    sortId INTEGER NOT NULL,
    FOREIGN KEY (sortId) REFERENCES SortEntity(id)
);

INSERT INTO InternalListEntity VALUES
(1, "all", 1, 1),
(2, "my_day", 2, 1),
(3, "tomorrow", 3, 1),
(4, "next_week", 4, 1),
(5, "incoming", 5, 1),
(6, "favorite", 6, 1),
(7, "done", 7, 1),
(8, "deleted", 8, 1);

getInternalLists:
SELECT * FROM InternalListEntity;

getMyDayList:
SELECT * FROM InternalListEntity
WHERE id = ?;

updateInternalList:
REPLACE INTO InternalListEntity
VALUES (?,?,?,?);

CREATE TABLE EditableListEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    title TEXT NOT NULL,
    isFavorite INTEGER AS Boolean DEFAULT 0 NOT NULL,
    color INTEGER,
    position INTEGER NOT NULL,
    sortId INTEGER NOT NULL,
    FOREIGN KEY (sortId) REFERENCES SortEntity(id)
);

insertEditableList:
INSERT INTO EditableListEntity
VALUES (?,?,?,?,?,?);

updateEditableList:
REPLACE INTO EditableListEntity
VALUES (?,?,?,?,?,?);

deleteEditableList:
DELETE FROM EditableListEntity
WHERE id = ?;

reduceEditableListPositions:
UPDATE EditableListEntity
SET position = position - 1
WHERE position > ?;

getEditableList:
SELECT * FROM EditableListEntity
WHERE EditableListEntity.id = ?;

getAllEditableLists:
SELECT * FROM EditableListEntity
ORDER BY position ASC;

getEditableListsCount:
SELECT COUNT(*) FROM EditableListEntity;

CREATE TABLE TaskEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    date INTEGER,
    time INTEGER,
    repeat TEXT NOT NULL,
    title TEXT NOT NULL,
    created INTEGER NOT NULL,
    updated INTEGER NOT NULL,
    isDone INTEGER AS Boolean DEFAULT 0 NOT NULL,
    isInMyDay INTEGER AS Boolean DEFAULT 0 NOT NULL,
    isDeleted INTEGER AS Boolean DEFAULT 0 NOT NULL,
    isFavorite INTEGER AS Boolean DEFAULT 0 NOT NULL,
    listId INTEGER,
    priorityId INTEGER NOT NULL,
    FOREIGN KEY (listId) REFERENCES EditableListEntity(id),
    FOREIGN KEY (priorityId) REFERENCES PriorityEntity(id)
);

insertTask:
INSERT INTO TaskEntity
VALUES (NULL,?,?,?,?,?,?,?,?,?,?,?,?);

updateTask:
REPLACE INTO TaskEntity
VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);

deleteTask:
DELETE FROM TaskEntity
WHERE id = ?;

getTask:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE TaskEntity.id = ?;

getTaskId:
SELECT id FROM TaskEntity
WHERE TaskEntity.created = ?;

getTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE listId = ? AND isDeleted = FALSE;

getCountTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE listId = ? AND isDeleted = FALSE;

getMyDayTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE (isInMyDay = TRUE OR date = ?) AND isDeleted = FALSE;

getCountMyDayTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE (isInMyDay = TRUE OR date = ?) AND isDeleted = FALSE;

getTomorrowTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE date = ? AND isDeleted = FALSE;

getCountTomorrowTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE date = ? AND isDeleted = FALSE;

getNextWeekTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE date >= ? AND date <= ? AND isDeleted = FALSE;

getCountNextWeekTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE date >= ? AND date <= ? AND isDeleted = FALSE;

getFavoriteTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE TaskEntity.isFavorite = TRUE AND isDeleted = FALSE;

getCountFavoriteTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE TaskEntity.isFavorite = TRUE AND isDeleted = FALSE;

getDeletedTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDeleted = TRUE;

getCountDeletedTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDeleted = TRUE;

getDoneTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDone = TRUE AND isDeleted = FALSE;

getCountDoneTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDone = TRUE AND isDeleted = FALSE;

getAllTasks:
SELECT * FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDeleted = FALSE;

getCountAllTasks:
SELECT COUNT(*) FROM TaskEntity
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE isDeleted = FALSE;

CREATE TABLE ActionEntity(
    id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    points INTEGER NOT NULL,
    actionType TEXT NOT NULL,
    taskId INTEGER,
    FOREIGN KEY (taskId) REFERENCES TaskEntity(id)
);

addAction:
INSERT INTO ActionEntity
VALUES (?,?,?,?);

deleteAction:
DELETE FROM ActionEntity
WHERE taskId = ? AND actionType = ?;

getAllPoints:
SELECT SUM(points) FROM ActionEntity;

getListPoints:
SELECT COALESCE(SUM(points), 0) FROM ActionEntity
LEFT OUTER JOIN TaskEntity ON ActionEntity.taskId == TaskEntity.id
WHERE listId = ?;

getAllActions:
SELECT * FROM ActionEntity
LEFT OUTER JOIN TaskEntity ON ActionEntity.taskId == TaskEntity.id
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id;

getTaskActions:
SELECT * FROM ActionEntity
LEFT OUTER JOIN TaskEntity ON ActionEntity.taskId == TaskEntity.id
LEFT OUTER JOIN EditableListEntity ON TaskEntity.listId == EditableListEntity.id
LEFT OUTER JOIN PriorityEntity ON TaskEntity.priorityId == PriorityEntity.id
WHERE taskId = ?;

CREATE TABLE TaskLogEntity(
    taskLogId INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    taskLogType TEXT NOT NULL,
    date INTEGER NOT NULL,
    taskId INTEGER NOT NULL,
    taskTitle TEXT NOT NULL,
    taskCategoryId INTEGER
);

makeTaskLog:
INSERT INTO TaskLogEntity
VALUES (NULL,?,?,?,?,?);

getTaskLogsByCategory:
SELECT taskLogId, taskLogType, date, taskId, taskTitle, taskCategoryId FROM TaskLogEntity
WHERE taskCategoryId = ?;

getAllTaskLogs:
SELECT taskLogId, taskLogType, date, taskId, taskTitle, taskCategoryId FROM TaskLogEntity;
